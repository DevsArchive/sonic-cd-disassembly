00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sonic CD Misc. Disassembly
00000000                            ; By Ralakimus 2021
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sub CPU Backup RAM management functions
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	include	"_inc/macros.asm"
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sonic CD Misc. Disassembly
00000000                            ; By Ralakimus 2021
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Common macros
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; Align
00000000                            ; -------------------------------------------------------------------------
00000000                            ; PARAMETERS:
00000000                            ;	bound	- Size boundary
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000                            align macros bound
00000000                            	cnop	0,\bound			; Align data
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; Push all registers to the stack
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000                            pusha macros
00000000                            	movem.l	d0-a6,-(sp)			; Push registers
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; Pop all registers from the stack
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000                            popa macros
00000000                            	movem.l	(sp)+,d0-a6			; Pop registers
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; Pad RS to even address
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000                            rsEven macros
00000000                            	rs.b	__rs&1				; Align RS
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; -------------------------------------------------------------------------
00000000                            	include	"_inc/subcpu.asm"
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sonic CD Misc. Disassembly
00000000                            ; By Ralakimus 2021
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sub CPU definitions
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; Memory map
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =00000000                  PRG_RAM		EQU	$00000			; PRG-RAM
00000000 =00080000                  WORDRAM_2M	EQU	$80000			; Word RAM in 2M mode	
00000000 =000C0000                  WORDRAM_1M	EQU	$C0000			; Word RAM in 1M mode
00000000                            
00000000 =00006000                  SP_START	EQU	PRG_RAM+$6000		; Start of SP program
00000000                            
00000000 =00040000                  WORDRAM_2M_LEN	EQU	$40000			; Size of Word RAM in 2M mode
00000000 =00020000                  WORDRAM_1M_LEN	EQU	$20000			; Size of Word RAM in 1M mode
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; Gate array
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =FFFF8000                  GA_BASE		EQU	$FFFF8000		; Gate array base
00000000 =FFFF0000                  PCM_BASE	EQU	$FFFF0000		; PCM chip base
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =00000000                  gaReset		EQU	$0000			; Peripheral reset
00000000 =00000002                  gaMemMode	EQU	$0002			; Memory mode/Write protection
00000000 =00000004                  gaCDCMode	EQU	$0004			; CDC mode/Device destination
00000000 =00000006                  gaCRS1		EQU	$0006			; CDC control register
00000000 =00000008                  gaCDCHost	EQU	$0008			; 16 bit CDC data to host
00000000 =0000000A                  gaDMAAddr	EQU	$000A			; DMA offset into destination area
00000000 =0000000C                  gaStopwatch	EQU	$000C			; CDC/gp timer 30.72us LSB
00000000 =0000000E                  gaComFlags	EQU	$000E			; Communication flags
00000000 =0000000E                  gaMainFlag	EQU	$000E			; Main CPU communication flag
00000000 =0000000F                  gaSubFlag	EQU	$000F			; Sub CPU communication flag
00000000 =00000010                  gaCmds		EQU	$0010			; Communication commands
00000000 =00000010                  gaCmd0		EQU	$0010			; Communication command 0
00000000 =00000011                  gaCmd1		EQU	$0011			; Communication command 1
00000000 =00000012                  gaCmd2		EQU	$0012			; Communication command 2
00000000 =00000013                  gaCmd3		EQU	$0013			; Communication command 3
00000000 =00000014                  gaCmd4		EQU	$0014			; Communication command 4
00000000 =00000015                  gaCmd5		EQU	$0015			; Communication command 5
00000000 =00000016                  gaCmd6		EQU	$0016			; Communication command 6
00000000 =00000017                  gaCmd7		EQU	$0017			; Communication command 7
00000000 =00000018                  gaCmd8		EQU	$0018			; Communication command 8
00000000 =00000019                  gaCmd9		EQU	$0019			; Communication command 9
00000000 =0000001A                  gaCmdA		EQU	$001A			; Communication command A
00000000 =0000001B                  gaCmdB		EQU	$001B			; Communication command B
00000000 =0000001C                  gaCmdC		EQU	$001C			; Communication command C
00000000 =0000001D                  gaCmdD		EQU	$001D			; Communication command D
00000000 =0000001E                  gaCmdE		EQU	$001E			; Communication command E
00000000 =0000001F                  gaCmdF		EQU	$001F			; Communication command F
00000000 =00000020                  gaStats		EQU	$0020			; Communication statuses
00000000 =00000020                  gaStat0		EQU	$0020			; Communication status 0
00000000 =00000021                  gaStat1		EQU	$0021			; Communication status 1
00000000 =00000022                  gaStat2		EQU	$0022			; Communication status 2
00000000 =00000023                  gaStat3		EQU	$0023			; Communication status 3
00000000 =00000024                  gaStat4		EQU	$0024			; Communication status 4
00000000 =00000025                  gaStat5		EQU	$0025			; Communication status 5
00000000 =00000026                  gaStat6		EQU	$0026			; Communication status 6
00000000 =00000027                  gaStat7		EQU	$0027			; Communication status 7
00000000 =00000028                  gaStat8		EQU	$0028			; Communication status 8
00000000 =00000029                  gaStat9		EQU	$0029			; Communication status 9
00000000 =0000002A                  gaStatA		EQU	$002A			; Communication status A
00000000 =0000002B                  gaStatB		EQU	$002B			; Communication status B
00000000 =0000002C                  gaStatC		EQU	$002C			; Communication status C
00000000 =0000002D                  gaStatD		EQU	$002D			; Communication status D
00000000 =0000002E                  gaStatE		EQU	$002E			; Communication status E
00000000 =0000002F                  gaStatF		EQU	$002F			; Communication status F
00000000 =00000030                  gaInt3Timer	EQU	$0030			; Interrupt 3 timer
00000000 =00000032                  gaIntMask	EQU	$0032			; Interrupt mask
00000000 =00000034                  gaCDFader	EQU	$0034			; Fader control/Spindle speed
00000000 =00000036                  gaCDDCtrl	EQU	$0036			; CDD control
00000000 =00000038                  gaCDDComm	EQU	$0038			; CDD communication
00000000 =0000004C                  gaFontCol	EQU	$004C			; Source color values
00000000 =0000004E                  gaFontBits	EQU	$004E			; Font data
00000000 =00000056                  gaFontData	EQU	$0056			; Read only
00000000 =00000058                  gaStampSz	EQU	$0058			; Stamp size/Map size
00000000 =0000005A                  gaStampMap	EQU	$005A			; Stamp map base address
00000000 =0000005C                  gaImgVCell	EQU	$005C			; Image buffer V size in cells
00000000 =0000005E                  gaImgStart	EQU	$005E			; Image buffer start address
00000000 =00000060                  gaImgOff	EQU	$0060			; Image buffer offset
00000000 =00000062                  gaImgHDot	EQU	$0062			; Image buffer H size in dots
00000000 =00000064                  gaImgVDot	EQU	$0064			; Image buffer V size in dots
00000000 =00000066                  gaTrace		EQU	$0066			; Trace vector base address
00000000 =00000068                  gaSubAddr	EQU	$0068			; Subcode top address
00000000 =00000100                  gaSubcode	EQU	$0100			; 64 word subcode buffer
00000000 =00000180                  gaSubImg	EQU	$0180			; Image of subcode buffer
00000000                            
00000000 =FFFF8000                  GA_RESET	EQU	GA_BASE+gaReset		; Peripheral reset
00000000 =FFFF8002                  GA_MEM_MODE	EQU	GA_BASE+gaMemMode	; Memory mode/Write protection
00000000 =FFFF8004                  GA_CDC_MODE	EQU	GA_BASE+gaCDCMode	; CDC mode/Device destination
00000000 =FFFF8006                  GA_CRS1		EQU	GA_BASE+gaCRS1		;  CDC control register
00000000 =FFFF8008                  GA_CDC_HOST	EQU	GA_BASE+gaCDCHost	; 16 bit CDC data to host
00000000 =FFFF800A                  GA_DMA_ADDR	EQU	GA_BASE+gaDMAAddr	; DMA offset into destination area
00000000 =FFFF800C                  GA_STOPWATCH	EQU	GA_BASE+gaStopwatch	; CDC/gp timer 30.72us LSB
00000000                            GA_COM_FLAGS	EQU	GA_BASE+gaFlags		; Communication flags
00000000 =FFFF800E                  GA_MAIN_FLAG	EQU	GA_BASE+gaMainFlag	; Main CPU communication flag
00000000 =FFFF800F                  GA_SUB_FLAG	EQU	GA_BASE+gaSubFlag	; Sub CPU communication flag
00000000 =FFFF8010                  GA_CMDS		EQU	GA_BASE+gaCmds		; Communication commands
00000000 =FFFF8010                  GA_CMD_0	EQU	GA_BASE+gaCmd0		; Communication command 0
00000000 =FFFF8011                  GA_CMD_1	EQU	GA_BASE+gaCmd1		; Communication command 1
00000000 =FFFF8012                  GA_CMD_2	EQU	GA_BASE+gaCmd2		; Communication command 2
00000000 =FFFF8013                  GA_CMD_3	EQU	GA_BASE+gaCmd3		; Communication command 3
00000000 =FFFF8014                  GA_CMD_4	EQU	GA_BASE+gaCmd4		; Communication command 4
00000000 =FFFF8015                  GA_CMD_5	EQU	GA_BASE+gaCmd5		; Communication command 5
00000000 =FFFF8016                  GA_CMD_6	EQU	GA_BASE+gaCmd6		; Communication command 6
00000000 =FFFF8017                  GA_CMD_7	EQU	GA_BASE+gaCmd7		; Communication command 7
00000000 =FFFF8018                  GA_CMD_8	EQU	GA_BASE+gaCmd8		; Communication command 8
00000000 =FFFF8019                  GA_CMD_9	EQU	GA_BASE+gaCmd9		; Communication command 9
00000000 =FFFF801A                  GA_CMD_A	EQU	GA_BASE+gaCmdA		; Communication command A
00000000 =FFFF801B                  GA_CMD_B	EQU	GA_BASE+gaCmdB		; Communication command B
00000000 =FFFF801C                  GA_CMD_C	EQU	GA_BASE+gaCmdC		; Communication command C
00000000 =FFFF801D                  GA_CMD_D	EQU	GA_BASE+gaCmdD		; Communication command D
00000000 =FFFF801E                  GA_CMD_E	EQU	GA_BASE+gaCmdE		; Communication command E
00000000 =FFFF801F                  GA_CMD_F	EQU	GA_BASE+gaCmdF		; Communication command F
00000000 =FFFF8020                  GA_STATS	EQU	GA_BASE+gaStats		; Communication statuses
00000000 =FFFF8020                  GA_STAT_0	EQU	GA_BASE+gaStat0		; Communication status 0
00000000 =FFFF8021                  GA_STAT_1	EQU	GA_BASE+gaStat1		; Communication status 1
00000000 =FFFF8022                  GA_STAT_2	EQU	GA_BASE+gaStat2		; Communication status 2
00000000 =FFFF8023                  GA_STAT_3	EQU	GA_BASE+gaStat3		; Communication status 3
00000000 =FFFF8024                  GA_STAT_4	EQU	GA_BASE+gaStat4		; Communication status 4
00000000 =FFFF8025                  GA_STAT_5	EQU	GA_BASE+gaStat5		; Communication status 5
00000000 =FFFF8026                  GA_STAT_6	EQU	GA_BASE+gaStat6		; Communication status 6
00000000 =FFFF8027                  GA_STAT_7	EQU	GA_BASE+gaStat7		; Communication status 7
00000000 =FFFF8028                  GA_STAT_8	EQU	GA_BASE+gaStat8		; Communication status 8
00000000 =FFFF8029                  GA_STAT_9	EQU	GA_BASE+gaStat9		; Communication status 9
00000000 =FFFF802A                  GA_STAT_A	EQU	GA_BASE+gaStatA		; Communication status A
00000000 =FFFF802B                  GA_STAT_B	EQU	GA_BASE+gaStatB		; Communication status B
00000000 =FFFF802C                  GA_STAT_C	EQU	GA_BASE+gaStatC		; Communication status C
00000000 =FFFF802D                  GA_STAT_D	EQU	GA_BASE+gaStatD		; Communication status D
00000000 =FFFF802E                  GA_STAT_E	EQU	GA_BASE+gaStatE		; Communication status E
00000000 =FFFF802F                  GA_STAT_F	EQU	GA_BASE+gaStatF		; Communication status F
00000000 =FFFF8030                  GA_INT3_TIMER	EQU	GA_BASE+gaInt3Timer	; Interrupt 3 timer
00000000 =FFFF8032                  GA_INT_MASK	EQU	GA_BASE+gaIntMask	; Interrupt mask
00000000 =FFFF8034                  GA_CD_FADER	EQU	GA_BASE+gaCDFader	; Fader control/Spindle speed
00000000 =FFFF8036                  GA_CDD_CTRL	EQU	GA_BASE+gaCDDCtrl	; CDD control
00000000 =FFFF8038                  GA_CDD_COMM	EQU	GA_BASE+gaCDDComm	; CDD communication
00000000 =FFFF804C                  GA_FONT_COLOR	EQU	GA_BASE+gaFontCol	; Source color values
00000000 =FFFF804E                  GA_FONT_BITS	EQU	GA_BASE+gaFontBits	; Font data
00000000 =FFFF8056                  GA_FONT_DATA	EQU	GA_BASE+gaFontData	; Read only
00000000 =FFFF8058                  GA_STAMP_SIZE	EQU	GA_BASE+gaStampSz	; Stamp size/Map size
00000000 =FFFF805A                  GA_STAMP_MAP	EQU	GA_BASE+gaStampMap	; Stamp map base address
00000000 =FFFF805C                  GA_IMG_VCELL	EQU	GA_BASE+gaImgVCell	; Image buffer V size in cells
00000000 =FFFF805E                  GA_IMG_START	EQU	GA_BASE+gaImgStart	; Image buffer start address
00000000 =FFFF8060                  GA_IMG_OFFSET	EQU	GA_BASE+gaImgOff	; Image buffer offset
00000000 =FFFF8062                  GA_IMG_HDOT	EQU	GA_BASE+gaImgHDot	; Image buffer H size in dots
00000000 =FFFF8064                  GA_IMG_VDOT	EQU	GA_BASE+gaImgVDot	; Image buffer V size in dots
00000000 =FFFF8066                  GA_IMG_TRACE	EQU	GA_BASE+gaTrace		; Trace vector base address
00000000 =FFFF8068                  GA_SUBCODE_ADDR	EQU	GA_BASE+gaSubAddr	; Subcode top address
00000000 =FFFF8100                  GA_SUBCODE	EQU	GA_BASE+gaSubcode	; 64 word subcode buffer
00000000 =FFFF8180                  GA_SUBCODE_IMG	EQU	GA_BASE+gaSubImg	; Image of subcode buffer
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; PCM chip registers
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =00000001                  pcmEnv		EQU	$0000*2+1		; Volume
00000000 =00000003                  pcmPan		EQU	$0001*2+1		; Pan
00000000 =00000005                  pcmFDL		EQU	$0002*2+1		; Frequency (low)
00000000 =00000007                  pcmFDH		EQU	$0003*2+1		; Frequency (high)
00000000 =00000009                  pcmLSL		EQU	$0004*2+1		; Wave memory stop address (high)
00000000 =0000000B                  pcmLSH		EQU	$0005*2+1		; Wave memory stop address (low)
00000000 =0000000D                  pcmST		EQU	$0006*2+1		; Start of wave memory
00000000 =0000000F                  pcmCtrl		EQU	$0007*2+1		; Control
00000000 =00000011                  pcmOnOff	EQU	$0008*2+1		; On/Off
00000000 =00000021                  pcmWaveAddr	EQU	$0010*2+1		; Wave address
00000000 =00002001                  pcmWaveData	EQU	$1000*2+1		; Wave data
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =FFFF0001                  PCM_ENV		EQU	PCM_BASE+pcmEnv		; Volume
00000000 =FFFF0003                  PCM_PAN		EQU	PCM_BASE+pcmPan		; Pan
00000000 =FFFF0005                  PCM_FDL		EQU	PCM_BASE+pcmFDL		; Frequency (low)
00000000 =FFFF0007                  PCM_FDH		EQU	PCM_BASE+pcmFDH		; Frequency (high)
00000000 =FFFF0009                  PCM_LSL		EQU	PCM_BASE+pcmLSL		; Wave memory stop address (high)
00000000 =FFFF000B                  PCM_LSH		EQU	PCM_BASE+pcmLSH		; Wave memory stop address (low)
00000000 =FFFF000D                  PCM_ST		EQU	PCM_BASE+pcmST		; Start of wave memory
00000000 =FFFF000F                  PCM_CTRL	EQU	PCM_BASE+pcmCtrl	; Control
00000000 =FFFF0011                  PCM_ON_OFF	EQU	PCM_BASE+pcmOnOff	; On/Off
00000000 =FFFF0021                  PCM_WAVE_ADDR	EQU	PCM_BASE+pcmWaveAddr	; Wave address
00000000 =FFFF2001                  PCM_WAVE_DATA	EQU	PCM_BASE+pcmWaveData	; Wave data
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; BIOS function codes
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =00000002                  MSCSTOP		EQU	$0002
00000000 =00000003                  MSCPAUSEON	EQU	$0003
00000000 =00000004                  MSCPAUSEOFF	EQU	$0004
00000000 =00000005                  MSCSCANFF	EQU	$0005
00000000 =00000006                  MSCSCANFR	EQU	$0006
00000000 =00000007                  MSCSCANOFF	EQU	$0007
00000000                            
00000000 =00000008                  ROMPAUSEON	EQU	$0008
00000000 =00000009                  ROMPAUSEOFF	EQU	$0009
00000000                            
00000000 =0000000A                  DRVOPEN		EQU	$000A
00000000 =00000010                  DRVINIT		EQU	$0010
00000000                            
00000000 =00000011                  MSCPLAY		EQU	$0011
00000000 =00000012                  MSCPLAY1	EQU	$0012
00000000 =00000013                  MSCPLAYR	EQU	$0013
00000000 =00000014                  MSCPLAYT	EQU	$0014
00000000 =00000015                  MSCSEEK		EQU	$0015
00000000 =00000016                  MSCSEEKT	EQU	$0016
00000000                            
00000000 =00000017                  ROMREAD		EQU	$0017
00000000 =00000018                  ROMSEEK		EQU	$0018
00000000                            
00000000 =00000019                  MSCSEEK1	EQU	$0019
00000000 =0000001E                  TESTENTRY	EQU	$001E
00000000 =0000001F                  TESTENTRYLOOP	EQU	$001F
00000000                            
00000000 =00000020                  ROMREADN	EQU	$0020
00000000 =00000021                  ROMREADE	EQU	$0021
00000000                            
00000000 =00000080                  CDBCHK		EQU	$0080
00000000 =00000081                  CDBSTAT		EQU	$0081
00000000 =00000082                  CDBTOCWRITE	EQU	$0082
00000000 =00000083                  CDBTOCREAD	EQU	$0083
00000000 =00000084                  CDBPAUSE	EQU	$0084
00000000                            
00000000 =00000085                  FDRSET		EQU	$0085
00000000 =00000086                  FDRCHG		EQU	$0086
00000000                            
00000000 =00000087                  CDCSTART	EQU	$0087
00000000 =00000088                  CDCSTARTP	EQU	$0088
00000000 =00000089                  CDCSTOP		EQU	$0089
00000000 =0000008A                  CDCSTAT		EQU	$008A
00000000 =0000008B                  CDCREAD		EQU	$008B
00000000 =0000008C                  CDCTRN		EQU	$008C
00000000 =0000008D                  CDCACK		EQU	$008D
00000000                            
00000000 =0000008E                  SCDINIT		EQU	$008E
00000000 =0000008F                  SCDSTART	EQU	$008F
00000000 =00000090                  SCDSTOP		EQU	$0090
00000000 =00000091                  SCDSTAT		EQU	$0091
00000000 =00000092                  SCDREAD		EQU	$0092
00000000 =00000093                  SCDPQ		EQU	$0093
00000000 =00000094                  SCDPQL		EQU	$0094
00000000                            
00000000 =00000095                  LEDSET		EQU	$0095
00000000                            
00000000 =00000096                  CDCSETMODE	EQU	$0096
00000000                            
00000000 =00000097                  WONDERREQ	EQU	$0097
00000000 =00000098                  WONDERCHK	EQU	$0098
00000000                            
00000000 =00000000                  CBTINIT		EQU	$0000
00000000 =00000001                  CBTINT		EQU	$0001
00000000 =00000002                  CBTOPENDISC	EQU	$0002
00000000 =00000003                  CBTOPENSTAT	EQU	$0003
00000000 =00000004                  CBTCHKDISC	EQU	$0004
00000000 =00000005                  CBTCHKSTAT	EQU	$0005
00000000 =00000006                  CBTIPDISC	EQU	$0006
00000000 =00000007                  CBTIPSTAT	EQU	$0007
00000000 =00000008                  CBTSPDISC	EQU	$0008
00000000 =00000009                  CBTSPSTAT	EQU	$0009
00000000                            
00000000 =00000000                  BRMINIT		EQU	$0000
00000000 =00000001                  BRMSTAT		EQU	$0001
00000000 =00000002                  BRMSERCH	EQU	$0002
00000000 =00000003                  BRMREAD		EQU	$0003
00000000 =00000004                  BRMWRITE	EQU	$0004
00000000 =00000005                  BRMDEL		EQU	$0005
00000000 =00000006                  BRMFORMAT	EQU	$0006
00000000 =00000007                  BRMDIR		EQU	$0007
00000000 =00000008                  BRMVERIFY	EQU	$0008
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; BIOS entry points
00000000                            ; -------------------------------------------------------------------------
00000000                            
00000000 =00005F40                  _ADRERR		EQU	$00005F40
00000000 =00005EA0                  _BOOTSTAT	EQU	$00005EA0
00000000 =00005F16                  _BURAM		EQU	$00005F16
00000000 =00005F22                  _CDBIOS		EQU	$00005F22
00000000 =00005F1C                  _CDBOOT		EQU	$00005F1C
00000000 =00005E80                  _CDSTAT		EQU	$00005E80
00000000 =00005F52                  _CHKERR		EQU	$00005F52
00000000 =00005F46                  _CODERR		EQU	$00005F46
00000000 =00005F4C                  _DEVERR		EQU	$00005F4C
00000000 =00005F76                  _LEVEL1		EQU	$00005F76
00000000 =00005F7C                  _LEVEL2		EQU	$00005F7C
00000000 =00005F82                  _LEVEL3		EQU	$00005F82
00000000 =00005F88                  _LEVEL4		EQU	$00005F88
00000000 =00005F8E                  _LEVEL5		EQU	$00005F8E
00000000 =00005F94                  _LEVEL6		EQU	$00005F94
00000000 =00005F9A                  _LEVEL7		EQU	$00005F9A
00000000 =00005F6A                  _NOCOD0		EQU	$00005F6A
00000000 =00005F70                  _NOCOD1		EQU	$00005F70
00000000 =00005F0A                  _SETJMPTBL	EQU	$00005F0A
00000000 =00005F5E                  _SPVERR		EQU	$00005F5E
00000000 =00005F64                  _TRACE		EQU	$00005F64
00000000 =00005FA0                  _TRAP00		EQU	$00005FA0
00000000 =00005FA6                  _TRAP01		EQU	$00005FA6
00000000 =00005FAC                  _TRAP02		EQU	$00005FAC
00000000 =00005FB2                  _TRAP03		EQU	$00005FB2
00000000 =00005FB8                  _TRAP04		EQU	$00005FB8
00000000 =00005FBE                  _TRAP05		EQU	$00005FBE
00000000 =00005FC4                  _TRAP06		EQU	$00005FC4
00000000 =00005FCA                  _TRAP07		EQU	$00005FCA
00000000 =00005FD0                  _TRAP08		EQU	$00005FD0
00000000 =00005FD6                  _TRAP09		EQU	$00005FD6
00000000 =00005FDC                  _TRAP10		EQU	$00005FDC
00000000 =00005FE2                  _TRAP11		EQU	$00005FE2
00000000 =00005FE8                  _TRAP12		EQU	$00005FE8
00000000 =00005FEE                  _TRAP13		EQU	$00005FEE
00000000 =00005FF4                  _TRAP14		EQU	$00005FF4
00000000 =00005FFA                  _TRAP15		EQU	$00005FFA
00000000 =00005F58                  _TRPERR		EQU	$00005F58
00000000 =00005F28                  _USERCALL0	EQU	$00005F28
00000000 =00005F2E                  _USERCALL1	EQU	$00005F2E
00000000 =00005F34                  _USERCALL2	EQU	$00005F34
00000000 =00005F3A                  _USERCALL3	EQU	$00005F3A
00000000 =00005EA6                  _USERMODE	EQU	$00005EA6
00000000 =00005F10                  _WAITVSYNC	EQU	$00005F10
00000000                            
00000000                            ; -------------------------------------------------------------------------
00000000                            ; -------------------------------------------------------------------------
00000000                            	include	"_inc/system.asm"
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sonic CD Misc. Disassembly
00000000                            ; By Ralakimus 2021
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; System definitions
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; Addresses
00000000 =00007000                  SPVariables	EQU	$7000			; Variables
00000000 =00007400                  SaveDataTemp	EQU	$7400			; Temporary save data buffer
00000000 =00007700                  SPIRQ2		EQU	$7700			; IRQ2 handler
00000000 =00007800                  LoadFile	EQU	$7800			; Load file
00000000 =00007840                  GetFileName	EQU	$7840			; Get file name
00000000 =00007880                  FileEngineFunc	EQU	$7880			; File engine function handler
00000000 =00008C00                  FileEngineVars	EQU	$8C00			; File engine variables
00000000 =0000B800                  SPX		EQU	$B800			; SPX start location
00000000 =0000B800                  SPXFileTable	EQU	SPX			; SPX file table
00000000 =0000C000                  SPXStart	EQU	SPX+$800		; SPX code start
00000000 =00010000                  Stack		EQU	$10000			; Stack base
00000000 =00040000                  PCMDriver	EQU	PRG_RAM+$40000		; PCM driver location
00000000 =00040010                  PCMDrv_Run	EQU	PCMDriver+$10		; Run PCM driver
00000000 =00040022                  PCMDrv_Queue	EQU	PCMDriver+$22		; PCM sound queue
00000000                            
00000000                            ; File engine functions
00000000 =00000000                  FFUNC_INIT	EQU	0			; Initialize
00000000 =00000001                  FFUNC_OPER	EQU	1			; Perform operation
00000000 =00000002                  FFUNC_STATUS	EQU	2			; Get status
00000000 =00000003                  FFUNC_GETFILES	EQU	3			; Get files
00000000 =00000004                  FFUNC_LOADFILE	EQU	4			; Load file
00000000 =00000005                  FFUNC_FINDFILE	EQU	5			; Find file
00000000 =00000006                  FFUNC_LOADFMV	EQU	6			; Load FMV
00000000 =00000007                  FFUNC_RESET	EQU	7			; Reset
00000000 =00000008                  FFUNC_LOADFMVM	EQU	8			; Load FMV (mute)
00000000                            
00000000                            ; File engine operation modes
00000000 =00000000                  FMODE_NONE	EQU	0			; No function
00000000 =00000001                  FMODE_GETFILES	EQU	1			; Get files
00000000 =00000002                  FMODE_LOADFILE	EQU	2			; Load file
00000000 =00000003                  FMODE_LOADFMV	EQU	3			; Load FMV
00000000 =00000004                  FMODE_LOADFMVM	EQU	4			; Load FMV (mute)
00000000                            
00000000                            ; File engine statuses
00000000 =00000064                  FSTAT_OK	EQU	100			; OK
00000000 =FFFFFFFF                  FSTAT_GETFAIL	EQU	-1			; File get failed
00000000 =FFFFFFFE                  FSTAT_NOTFOUND	EQU	-2			; File not found
00000000 =FFFFFFFD                  FSTAT_LOADFAIL	EQU	-3			; File load failed
00000000 =FFFFFF9C                  FSTAT_READFAIL	EQU	-100			; Failed
00000000 =FFFFFF91                  FSTAT_FMVFAIL	EQU	-111			; FMV load failed
00000000                            
00000000                            ; FMV data types
00000000 =00000000                  FMVT_PCM	EQU	0			; PCM data type
00000000 =00000001                  FMVT_GFX	EQU	1			; Graphics data type
00000000                            
00000000                            ; FMV flags
00000000 =00000003                  FMVF_INIT	EQU	3			; Initialized flag
00000000 =00000004                  FMVF_BANK	EQU	4			; PCM bank ID
00000000 =00000005                  FMVF_READY	EQU	5			; Ready flag
00000000 =00000007                  FMVF_SECT	EQU	7			; Reading data section 1 flag
00000000                            
00000000                            ; FMV addreses
00000000 =00040000                  FMV_PCM_BUF	EQU	PRG_RAM+$40000		; PCM data buffer
00000000 =000C0000                  FMV_GFX_BUF	EQU	WORDRAM_1M		; Graphics data buffer
00000000                            
00000000                            ; File data
00000000 =0000000C                  FILENAME_LEN	EQU	12			; File name length
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; SP variables
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsset	SPVariables
00000000 =00007000                  curPCMDriver	rs.l	1			; Current PCM driver
00000000 =00007004                  ssFlags		rs.b	1			; Special stage flags
00000000 =00007005                  pcmDrvFlags	rs.b	1			; PCM driver flags
00000000                            		rs.b	$400-__rs
00000000 =00000400                  SP_VARS_LEN	rs.b	1			; Size of structure
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; File engine variables structure
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsreset
00000000 =00000000                  feOperMark	rs.l	1			; Operation bookmark
00000000 =00000004                  feSector	rs.l	1			; Sector to read from
00000000 =00000008                  feSectorCnt	rs.l	1			; Number of sectors to read
00000000 =0000000C                  feReturnAddr	rs.l	1			; Return address for CD read functions
00000000 =00000010                  feReadBuffer	rs.l	1			; Read buffer address
00000000 =00000014                  feReadTime	rs.b	0			; Time of read sector
00000000 =00000014                  feReadMin	rs.b	1			; Read sector minute
00000000 =00000015                  feReadSec	rs.b	1			; Read sector second
00000000 =00000016                  feReadFrame	rs.b	1			; Read sector frame
00000000                            		rs.b	1
00000000 =00000018                  feDirSectors	rs.b	0			; Directory size in sectors
00000000 =00000018                  feFileSize	rs.l	1			; File size buffer
00000000 =0000001C                  feOperMode	rs.w	1			; Operation mode
00000000 =0000001E                  feStatus	rs.w	1			; Status code
00000000 =00000020                  feFileCount	rs.w	1			; File count
00000000 =00000022                  feWaitTime	rs.w	1			; Wait timer
00000000 =00000024                  feRetries	rs.w	1			; Retry counter
00000000 =00000026                  feSectorsRead	rs.w	1			; Number of sectors read
00000000 =00000028                  feCDC		rs.b	1			; CDC mode
00000000 =00000029                  feSectorFrame	rs.b	1			; Sector frame
00000000 =0000002A                  feFileName	rs.b	FILENAME_LEN		; File name buffer
00000000                            		rs.b	$100-__rs
00000000 =00000100                  feFileList	rs.b	$2000			; File list
00000000 =00002100                  feDirReadBuf	rs.b	$900			; Directory read buffer
00000000 =00002A00                  feFMVSectFrame	rs.w	1			; FMV sector frame
00000000 =00002A02                  feFMVDataType	rs.b	1			; FMV read data type
00000000 =00002A03                  feFMVFlags	rs.b	1			; FMV flags
00000000 =00002A04                  feFMVFailCount	rs.b	1			; FMV fail counter
00000000 =00002A05                  FILE_VARS_LEN	rs.b	0			; Size of structure
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; File entry structure
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsreset
00000000 =00000000                  fileName	rs.b	FILENAME_LEN		; File name
00000000                            		rs.b	$17-__rs
00000000 =00000017                  fileFlags	rs.b	1			; File flags
00000000 =00000018                  fileSector	rs.l	1			; File sector
00000000 =0000001C                  fileLength	rs.l	1			; File size
00000000 =00000020                  FILE_ENTRY_LEN	rs.b	0			; Size of structure
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; -------------------------------------------------------------------------------
00000000                            	include	"_inc/buram.asm"
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sonic CD Misc. Disassembly
00000000                            ; By Ralakimus 2021
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Shared Backup RAM management variables
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Backup RAM data
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsreset
00000000                            		rs.b	$2A0
00000000                            		rs.b	$20
00000000 =000002C0                  BURAM_DATA_LEN	rs.b	0			; Size of structure
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Backup RAM function parameters
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsreset
00000000 =00000000                  buramFile	rs.b	$B			; File name
00000000 =0000000B                  buramMisc	rs.b	0			; Misc. parameters start
00000000 =0000000B                  buramFlag	rs.b	1			; Flag
00000000 =0000000C                  buramBlkSz	rs.w	1			; Block size
00000000 =0000000E                  BURAM_PARAM_LEN	rs.b	0			; Size of structure
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Shared Word RAM variables
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsset	WORDRAM_2M+$20
00000000 =00080020                  commandID	rs.b	1			; Command ID
00000000 =00080021                  cmdStatus	rs.b	1			; Command status
00000000 =00080022                  buramD0		rs.w	1			; Backup RAM function returned d0
00000000 =00080024                  buramD1		rs.w	1			; Backup RAM function returned d1
00000000 =00080026                  useRAMCart	rs.b	1			; Use RAM cart flag
00000000 =00080027                  ramCartFound	rs.b	1			; RAM cart found flag
00000000 =00080028                  buramDisabled	rs.b	1			; Backup RAM disabled flag
00000000 =00080029                  writeFlag	rs.b	1			; Backup RAM function write flag
00000000 =0008002A                  blockSize	rs.w	1			; Backup RAM function block size
00000000                            		rs.b	4
00000000 =00080030                  buramParams	rs.b	BURAM_PARAM_LEN		; Backup RAM function parameters
00000000                            		rs.b	2
00000000 =00080040                  buramData	rs.b	BURAM_DATA_LEN		; Backup RAM data
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsset	PRG_RAM+$16000
00000000 =00016000                  VARS_START	rs.b	0			; Start of area
00000000                            		rs.b	$800			; Unused
00000000 =00016800                  irq1Flag	rs.b	1			; IRQ1 flag
00000000                            		rs.b	$17FF			; Unused
00000000 =00002000                  VARS_LEN	EQU	__rs-VARS_START		; Size of area
00000000                            
00000000 =000B8000                  decompWindow	EQU	WORDRAM_2M+$38000	; Decompression sliding window
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Program start
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	org	$10000
00010000                            
00010000 21FC 0000 0000 5F78        	move.l	#IRQ1,_LEVEL1+2.w		; Set IRQ1 handler
00010008 11FC 0000 8003             	move.b	#0,GA_MEM_MODE+1.w		; Set to 2M mode
0001000E                            
0001000E 7000                       	moveq	#0,d0				; Clear communication statuses
00010010 21C0 8020                  	move.l	d0,GA_STAT_0.w
00010014 21C0 8024                  	move.l	d0,GA_STAT_4.w
00010018 21C0 8028                  	move.l	d0,GA_STAT_8.w
0001001C 21C0 802C                  	move.l	d0,GA_STAT_C.w
00010020                            	
00010020 08F8 0007 800F             	bset	#7,GA_SUB_FLAG.w		; Tell Main CPU we're ready to accept Word RAM access
00010026 08B8 0001 8033             	bclr	#1,GA_INT_MASK+1.w		; Disable level 1 interrupt
0001002C 08B8 0003 8033             	bclr	#3,GA_INT_MASK+1.w		; Disable timer interrupt
00010032 11FC 0003 8004             	move.b	#3,GA_CDC_MODE.w		; Set CDC mode to "Sub CPU"
00010038                            
00010038 41F9 0001 6000             	lea	VARS_START,a0			; Clear variables
0001003E 3E3C 07FF                  	move.w	#VARS_LEN/4-1,d7
00010042                            
00010042                            .ClearVars:
00010042 20FC 0000 0000             	move.l	#0,(a0)+
00010048 51CF FFF8                  	dbf	d7,.ClearVars
0001004C                            
0001004C 6100 0000                  	bsr.w	WaitWordRAMAccess		; Wait for Word RAM access
00010050                            
00010050 41F9 0008 0000             	lea	WORDRAM_2M,a0			; Clear Word RAM
00010056 3E3C 7FFF                  	move.w	#WORDRAM_2M_LEN/8-1,d7
0001005A                            
0001005A                            .ClearWordRAM:
0001005A 20FC 0000 0000             	move.l	#0,(a0)+
00010060 20FC 0000 0000             	move.l	#0,(a0)+
00010066 51CF FFF2                  	dbf	d7,.ClearWordRAM
0001006A                            
0001006A 08F8 0001 8033             	bset	#1,GA_INT_MASK+1.w		; Enable level 1 interrupt
00010070 08B8 0007 800F             	bclr	#7,GA_SUB_FLAG.w		; Tell Main CPU we're done initializing
00010076                            
00010076                            MainLoop:
00010076 6100 0000                  	bsr.w	WaitWordRAMAccess		; Wait for Word RAM access
0001007A 0838 0007 800E             	btst	#7,GA_MAIN_FLAG.w		; Is the Main CPU finished?
00010080 6600                       	bne.s	.Done				; If so, branch
00010082 6100 0000                  	bsr.w	RunBuRAMCmd			; Run Backup RAM command
00010086 6100 0000                  	bsr.w	GiveWordRAMAccess		; Give Word RAM access to Main CPU
0001008A 6000 FFEA                  	bra.w	MainLoop			; Loop
0001008E                            
0001008E                            .Done:
0001008E 08F8 0007 800F             	bset	#7,GA_SUB_FLAG.w		; Tell Main CPU that we are done
00010094                            
00010094                            .WaitMainCPU:
00010094 0838 0007 800E             	btst	#7,GA_MAIN_FLAG.w		; Is the Main CPU done wrapping up>
0001009A 66F8                       	bne.s	.WaitMainCPU			; If not, wait
0001009C                            
0001009C 7000                       	moveq	#0,d0				; Clear communication statuses
0001009E 21C0 8020                  	move.l	d0,GA_STAT_0.w
000100A2 21C0 8024                  	move.l	d0,GA_STAT_4.w
000100A6 21C0 8028                  	move.l	d0,GA_STAT_8.w
000100AA 21C0 802C                  	move.l	d0,GA_STAT_C.w
000100AE 11C0 800F                  	move.b	d0,GA_SUB_FLAG.w
000100B2 4E71                       	nop
000100B4 4E75                       	rts
000100B6                            
000100B6                            ; -------------------------------------------------------------------------------
000100B6                            ; Unused function to get a command ID from the Main CPU
000100B6                            ; -------------------------------------------------------------------------------
000100B6                            
000100B6                            GetMainCPUCmd:
000100B6 3038 8012                  	move.w	GA_CMD_2.w,d0			; Get command ID from Main CPU
000100BA 6700 FFBA                  	beq.w	MainLoop			; If it's zero, exit out
000100BE 31F8 8012 8022             	move.w	GA_CMD_2.w,GA_STAT_2.w		; Acknowledge command
000100C4                            
000100C4                            .WaitMainCPU:
000100C4 4A78 8012                  	tst.w	GA_CMD_2.w			; Is the Main CPU ready?
000100C8 66FA                       	bne.s	.WaitMainCPU			; If not, branch
000100CA                            	
000100CA 31FC 0000 8022             	move.w	#0,GA_STAT_2.w			; Mark as ready for another command
000100D0 4E75                       	rts
000100D2                            
000100D2                            ; -------------------------------------------------------------------------------
000100D2                            ; Unknown IRQ1 handler
000100D2                            ; -------------------------------------------------------------------------------
000100D2                            
000100D2                            IRQ1:
000100D2 13FC 0000 0001 6800        	move.b	#0,irq1Flag			; Clear IRQ1 flag
000100DA 4E73                       	rte
000100DC                            
000100DC                            ; -------------------------------------------------------------------------------
000100DC                            ; Unknown decompression routine
000100DC                            ; -------------------------------------------------------------------------------
000100DC                            ; PARAMETERS:
000100DC                            ;	a0.l - Pointer to compressed data
000100DC                            ;	a1.l - Pointer to destination buffer
000100DC                            ; -------------------------------------------------------------------------------
000100DC                            
000100DC                            UnkDecomp:
000100DC 48E7 FFE0                  	movem.l	d0-a2,-(sp)			; Save registers
000100E0                            
000100E0 45F9 000B 8000             	lea	decompWindow,a2			; Decompression sliding window
000100E6 3E18                       	move.w	(a0)+,d7			; Get size of uncompressed data
000100E8 5347                       	subq.w	#1,d7				; Subtract 1 for dbf
000100EA 343C 0FEE                  	move.w	#(-$12)&$FFF,d2			; Set window position
000100EE                            	
000100EE 1218                       	move.b	(a0)+,d1			; Get first description field
000100F0 3C3C 0FFF                  	move.w	#$FFF,d6			; Set window position mask
000100F4 7008                       	moveq	#8,d0				; Number of bits in description field
000100F6                            
000100F6                            .MainLoop:
000100F6 51C8 0000                  	dbf	d0,.NextDescBit			; Loop until all flags have been scanned
000100FA 7007                       	moveq	#8-1,d0				; Prepare next description field
000100FC 1218                       	move.b	(a0)+,d1
000100FE                            
000100FE                            .NextDescBit:
000100FE E209                       	lsr.b	#1,d1				; Get next description field bit
00010100 6400                       	bcc.s	.CopyFromWindow			; 0 | If we are copying from the window, branch
00010102                            
00010102                            .CopyNextByte:
00010102 12D0                       	move.b	(a0),(a1)+			; 1 | Copy next byte from archive
00010104 1598 2000                  	move.b	(a0)+,(a2,d2.w)			; Store in window
00010108 5242                       	addq.w	#1,d2				; Advance window position
0001010A C446                       	and.w	d6,d2
0001010C 51CF FFE8                  	dbf	d7,.MainLoop			; Loop until all of the data is decompressed
00010110 6000                       	bra.s	.End				; Exit out
00010112                            
00010112                            .CopyFromWindow:
00010112 7600                       	moveq	#0,d3
00010114 1618                       	move.b	(a0)+,d3			; Get low byte of window position
00010116 1818                       	move.b	(a0)+,d4			; Get high bits of window position and length
00010118                            	
00010118 3A04                       	move.w	d4,d5				; Combine window position bits
0001011A 0245 00F0                  	andi.w	#$F0,d5
0001011E E94D                       	lsl.w	#4,d5
00010120 8645                       	or.w	d5,d3
00010122                            
00010122 0244 000F                  	andi.w	#$F,d4				; Isolate length
00010126 5444                       	addq.w	#3-1,d4				; Copy at least 3 bytes from window
00010128                            
00010128                            .CopyWindowLoop:
00010128 1A32 3000                  	move.b	(a2,d3.w),d5			; Get byte from window
0001012C 12C5                       	move.b	d5,(a1)+			; Store in decompressed data buffer
0001012E 5347                       	subq.w	#1,d7				; Decrement bytes left to decompress
00010130 1585 2000                  	move.b	d5,(a2,d2.w)			; Store in window
00010134                            	
00010134 5243                       	addq.w	#1,d3				; Advance copy position
00010136 C646                       	and.w	d6,d3
00010138 5242                       	addq.w	#1,d2				; Advance window position
0001013A C446                       	and.w	d6,d2
0001013C                            
0001013C 51CC FFEA                  	dbf	d4,.CopyWindowLoop		; Loop until all bytes are copied
00010140 4A47                       	tst.w	d7				; Are there any bytes left to decompress?
00010142 6AB2                       	bpl.s	.MainLoop			; If so, branch
00010144                            
00010144                            .End:
00010144 4CDF 07FF                  	movem.l	(sp)+,d0-a2			; Restore registers
00010148 4E75                       	rts
0001014A                            
0001014A                            ; -------------------------------------------------------------------------------
0001014A                            ; Mass copy 128 bytes
0001014A                            ; -------------------------------------------------------------------------------
0001014A                            ; PARAMETERS:
0001014A                            ;	a1.l - Pointer to source data
0001014A                            ;	a2.l - Pointer to destination buffer
0001014A                            ; -------------------------------------------------------------------------------
0001014A                            
0001014A                            MassCopy:
0001014A                            	rept	32
0001014A                            		move.l	(a1)+,(a2)+
0001014A 24D9 24D9 24D9 24D9 24D9+  	endr
0001018A 4E75                       	rts
0001018C                            
0001018C                            ; -------------------------------------------------------------------------------
0001018C                            ; Wait for the IRQ1 handler to be run
0001018C                            ; -------------------------------------------------------------------------------
0001018C                            
0001018C                            WaitIRQ1:
0001018C 13FC 0001 0001 6800        	move.b	#1,irq1Flag			; Set IRQ1 flag
00010194 46FC 2000                  	move	#$2000,sr			; Enable interrupts
00010198                            
00010198                            .Wait:
00010198 4A39 0001 6800             	tst.b	irq1Flag			; Has the IRQ1 handler been run?
0001019E 66F8                       	bne.s	.Wait				; If not, wait
000101A0 4E75                       	rts
000101A2                            
000101A2                            ; -------------------------------------------------------------------------------
000101A2                            ; Wait for the Main CPU to be ready
000101A2                            ; -------------------------------------------------------------------------------
000101A2                            
000101A2                            WaitMainCPU:
000101A2 4A78 8012                  	tst.w	GA_CMD_2.w			; Is the Main CPU ready?
000101A6 66FA                       	bne.s	WaitMainCPU			; If not, branch
000101A8 4E75                       	rts
000101AA                            
000101AA                            ; -------------------------------------------------------------------------------
000101AA                            ; Give Word RAM access to the Main CPU (and finish off command)
000101AA                            ; -------------------------------------------------------------------------------
000101AA                            
000101AA                            GiveWordRAMAccess:
000101AA 08F8 0000 8003             	bset	#0,GA_MEM_MODE+1.w		; Give Word RAM access to Main CPU
000101B0 0838 0000 8003             	btst	#0,GA_MEM_MODE+1.w		; Has it been given?
000101B6 67F2                       	beq.s	GiveWordRAMAccess		; If not, wait
000101B8 4E75                       	rts
000101BA                            
000101BA                            ; -------------------------------------------------------------------------------
000101BA                            ; Wait for Word RAM access
000101BA                            ; -------------------------------------------------------------------------------
000101BA                            
000101BA                            WaitWordRAMAccess:
000101BA 0838 0001 8003             	btst	#1,GA_MEM_MODE+1.w		; Do we have Word RAM access?
000101C0 67F8                       	beq.s	WaitWordRAMAccess		; If not, wait
000101C2 4E75                       	rts
000101C4                            
000101C4                            ; -------------------------------------------------------------------------------
000101C4                            ; Unknown map data(?) loading routine
000101C4                            ; -------------------------------------------------------------------------------
000101C4                            ; PARAMETERS:
000101C4                            ;	a1.l - Pointer to source data
000101C4                            ;	d1.w - Width (minus 1)
000101C4                            ;	d2.w - Height (minus 1)
000101C4                            ; -------------------------------------------------------------------------------
000101C4                            
000101C4                            UnkMapDataLoad:
000101C4 283C 0000 0100             	move.l	#$100,d4			; Stride
000101CA                            
000101CA                            .SetupRow:
000101CA 2440                       	movea.l	d0,a2				; Set row pointer
000101CC 3601                       	move.w	d1,d3				; Set row width
000101CE                            
000101CE                            .RowLoop:
000101CE 3A19                       	move.w	(a1)+,d5			; Get data
000101D0 E54D                       	lsl.w	#2,d5
000101D2 34C5                       	move.w	d5,(a2)+			; Store it
000101D4 51CB FFF8                  	dbf	d3,.RowLoop			; Loop until row is written
000101D8 D084                       	add.l	d4,d0				; Next row
000101DA 51CA FFEE                  	dbf	d2,.SetupRow			; Loop until all data is written
000101DE 4E75                       	rts
000101E0                            
000101E0                            ; -------------------------------------------------------------------------------
000101E0                            ; Run Backup RAM command
000101E0                            ; -------------------------------------------------------------------------------
000101E0                            
000101E0                            RunBuRAMCmd:
000101E0 7000                       	moveq	#0,d0				; Get command ID
000101E2 1039 0008 0020             	move.b	commandID,d0
000101E8 6700                       	beq.s	.End				; If it's zero, branch
000101EA 5340                       	subq.w	#1,d0
000101EC 0C40 0000                  	cmpi.w	#(.CommandsEnd-.Commands)/2,d0	; Is it too large?
000101F0 6400                       	bcc.s	.Error				; If so, branch
000101F2                            
000101F2 D040                       	add.w	d0,d0				; Execute command
000101F4 41F9 0000 0000             	lea	.Commands,a0
000101FA 3030 0000                  	move.w	(a0,d0.w),d0
000101FE 7200                       	moveq	#0,d1
00010200 4EB0 0000                  	jsr	(a0,d0.w)
00010204 6500                       	bcs.s	.Error				; If an error occured, branch
00010206                            
00010206 13FC 0000 0008 0021        	move.b	#0,cmdStatus			; Mark as a success
0001020E 6000                       	bra.s	.GetReturnVals
00010210                            
00010210                            .Error:
00010210 13FC 00FF 0008 0021        	move.b	#-1,cmdStatus			; Mark as a failure
00010218                            
00010218                            .GetReturnVals:
00010218 33C0 0008 0022             	move.w	d0,buramD0			; Store return values
0001021E 33C1 0008 0024             	move.w	d1,buramD1
00010224 4239 0008 0020             	clr.b	commandID			; Mark command as completed
0001022A                            
0001022A                            .End:
0001022A 4E75                       	rts
0001022C                            
0001022C                            ; -------------------------------------------------------------------------------
0001022C                            
0001022C                            .Commands:
0001022C 0000                       	dc.w	Cmd_InitBuRAM-.Commands		; Initialize Backup RAM interaction
0001022E 0000                       	dc.w	Cmd_BuRAMStatus-.Commands	; Get Backup RAM status
00010230 0000                       	dc.w	Cmd_SearchBuRAM-.Commands	; Search Backup RAM
00010232 0000                       	dc.w	Cmd_ReadBuRAM-.Commands		; Read from Backup RAM
00010234 0000                       	dc.w	Cmd_WriteBuRAM-.Commands	; Write to Backup RAM
00010236 0000                       	dc.w	Cmd_DeleteBuRAM-.Commands	; Delete Backup RAM
00010238 0000                       	dc.w	Cmd_FormatBuRAM-.Commands	; Format Backup RAM
0001023A 0000                       	dc.w	Cmd_GetBuRAMDir-.Commands	; Get Backup RAM directory
0001023C 0000                       	dc.w	Cmd_VerifyBuRAM-.Commands	; Verify Backup RAM
0001023E 0000                       	dc.w	Cmd_ReadSaveData-.Commands	; Read save data
00010240 0000                       	dc.w	Cmd_WriteSaveData-.Commands	; Write save data
00010242                            .CommandsEnd:
00010242                            
00010242                            ; -------------------------------------------------------------------------------
00010242                            ; Initialize Backup RAM interaction
00010242                            ; -------------------------------------------------------------------------------
00010242                            
00010242                            Cmd_InitBuRAM:
00010242 41F9 0000 0000             	lea	BuRAMScratch,a0
00010248 43F9 0000 0000             	lea	BuRAMStrings,a1
0001024E 7000                       	moveq	#BRMINIT,d0
00010250 4EF8 5F16                  	jmp	_BURAM.w
00010254                            
00010254                            ; -------------------------------------------------------------------------------
00010254                            ; Get Backup RAM status	
00010254                            ; -------------------------------------------------------------------------------
00010254                            
00010254                            Cmd_BuRAMStatus:
00010254 7001                       	moveq	#BRMSTAT,d0
00010256 227C 0000 0000             	movea.l	#BuRAMStrings,a1
0001025C 4EF8 5F16                  	jmp	_BURAM.w
00010260                            
00010260                            ; -------------------------------------------------------------------------------
00010260                            ; Search Backup RAM
00010260                            ; -------------------------------------------------------------------------------
00010260                            
00010260                            Cmd_SearchBuRAM:
00010260 207C 0008 0030             	movea.l	#buramParams,a0
00010266 117C 0000 000B             	move.b	#0,buramMisc(a0)
0001026C 217C 0000 0000 000C        	move.l	#0,buramMisc+1(a0)
00010274 7002                       	moveq	#BRMSERCH,d0
00010276 4EF8 5F16                  	jmp	_BURAM.w
0001027A                            
0001027A                            ; -------------------------------------------------------------------------------
0001027A                            ; Read from Backup RAM
0001027A                            ; -------------------------------------------------------------------------------
0001027A                            
0001027A                            Cmd_ReadBuRAM:
0001027A 207C 0008 0030             	movea.l	#buramParams,a0
00010280 117C 0000 000B             	move.b	#0,buramMisc(a0)
00010286 217C 0000 0000 000C        	move.l	#0,buramMisc+1(a0)
0001028E 227C 0008 0040             	movea.l	#buramData,a1
00010294 7003                       	moveq	#BRMREAD,d0
00010296 4EB8 5F16                  	jsr	_BURAM.w
0001029A 4E75                       	rts
0001029C                            
0001029C                            ; -------------------------------------------------------------------------------
0001029C                            ; Read save data
0001029C                            ; -------------------------------------------------------------------------------
0001029C                            
0001029C                            Cmd_ReadSaveData:
0001029C 4A39 0008 0028             	tst.b	buramDisabled			; Is Backup RAM disabled?
000102A2 6600                       	bne.s	.BuRAMDisabled			; If so, branch
000102A4                            
000102A4 61D4                       	bsr.s	Cmd_ReadBuRAM			; Read from Backup RAM
000102A6 6100 0000                  	bsr.w	WriteTempSaveData		; Write read data to temporary save data buffer
000102AA 33FC 0000 0008 0022        	move.w	#0,buramD0
000102B2 33FC 0000 0008 0024        	move.w	#0,buramD1
000102BA 4E75                       	rts
000102BC                            
000102BC                            .BuRAMDisabled:
000102BC 6100 0000                  	bsr.w	ReadTempSaveData		; Read from temporary save data buffer
000102C0 33FC 0000 0008 0022        	move.w	#0,buramD0
000102C8 33FC 0000 0008 0024        	move.w	#0,buramD1
000102D0 4E75                       	rts
000102D2                            
000102D2                            ; -------------------------------------------------------------------------------
000102D2                            ; Write to Backup RAM
000102D2                            ; -------------------------------------------------------------------------------
000102D2                            
000102D2                            Cmd_WriteBuRAM:
000102D2 207C 0008 0030             	movea.l	#buramParams,a0
000102D8 1179 0008 0029 000B        	move.b	writeFlag,buramFlag(a0)
000102E0 3179 0008 002A 000C        	move.w	blockSize,buramBlkSz(a0)
000102E8 227C 0008 0040             	movea.l	#buramData,a1
000102EE 7004                       	moveq	#BRMWRITE,d0
000102F0 4EB8 5F16                  	jsr	_BURAM.w
000102F4 4E75                       	rts
000102F6                            
000102F6                            ; -------------------------------------------------------------------------------
000102F6                            ; Write save data
000102F6                            ; -------------------------------------------------------------------------------
000102F6                            
000102F6                            Cmd_WriteSaveData:
000102F6 4A39 0008 0028             	tst.b	buramDisabled			; Is Backup RAM disabled?
000102FC 6600                       	bne.s	.BuRAMDisabled			; If so, branch
000102FE                            
000102FE 61D2                       	bsr.s	Cmd_WriteBuRAM			; Write to Backup RAM
00010300 6100 0000                  	bsr.w	WriteTempSaveData		; Write to temporary save data buffer
00010304 33FC 0000 0008 0022        	move.w	#0,buramD0
0001030C 33FC 0000 0008 0024        	move.w	#0,buramD1
00010314 4E75                       	rts
00010316                            
00010316                            .BuRAMDisabled:
00010316 6100 0000                  	bsr.w	WriteTempSaveData		; Write to temporary save data buffer
0001031A 33FC 0000 0008 0022        	move.w	#0,buramD0
00010322 33FC 0000 0008 0024        	move.w	#0,buramD1
0001032A 4E75                       	rts
0001032C                            
0001032C                            ; -------------------------------------------------------------------------------
0001032C                            ; Delete Backup RAM
0001032C                            ; -------------------------------------------------------------------------------
0001032C                            
0001032C                            Cmd_DeleteBuRAM:
0001032C 207C 0008 0030             	movea.l	#buramParams,a0
00010332 117C 0000 000B             	move.b	#0,buramMisc(a0)
00010338 217C 0000 0000 000C        	move.l	#0,buramMisc+1(a0)
00010340 7005                       	moveq	#BRMDEL,d0
00010342 4EF8 5F16                  	jmp	_BURAM.w
00010346                            
00010346                            ; -------------------------------------------------------------------------------
00010346                            ; Format Backup RAM
00010346                            ; -------------------------------------------------------------------------------
00010346                            
00010346                            Cmd_FormatBuRAM:
00010346 7006                       	moveq	#BRMFORMAT,d0
00010348 4EF8 5F16                  	jmp	_BURAM.w
0001034C                            
0001034C                            ; -------------------------------------------------------------------------------
0001034C                            ; Get Backup RAM directory
0001034C                            ; -------------------------------------------------------------------------------
0001034C                            
0001034C                            Cmd_GetBuRAMDir:
0001034C 207C 0008 0030             	movea.l	#buramParams,a0
00010352 117C 0000 000B             	move.b	#0,buramMisc(a0)
00010358 217C 0000 0000 000C        	move.l	#0,buramMisc+1(a0)
00010360 227C 0008 0044             	movea.l	#buramData+4,a1
00010366 2239 0008 0040             	move.l	buramData,d1
0001036C 7007                       	moveq	#BRMDIR,d0
0001036E 4EF8 5F16                  	jmp	_BURAM.w
00010372                            
00010372                            ; -------------------------------------------------------------------------------
00010372                            ; Verify Backup RAM
00010372                            ; -------------------------------------------------------------------------------
00010372                            
00010372                            Cmd_VerifyBuRAM:
00010372 207C 0008 0030             	movea.l	#buramParams,a0
00010378 1179 0008 0029 000B        	move.b	writeFlag,buramFlag(a0)
00010380 3179 0008 002A 000C        	move.w	blockSize,buramBlkSz(a0)
00010388 227C 0008 0040             	movea.l	#buramData,a1
0001038E 7008                       	moveq	#BRMVERIFY,d0
00010390 4EF8 5F16                  	jmp	_BURAM.w
00010394                            
00010394                            ; -------------------------------------------------------------------------------
00010394                            ; Write to temporary save data buffer
00010394                            ; -------------------------------------------------------------------------------
00010394                            
00010394                            WriteTempSaveData:
00010394 48E7 80C0                  	movem.l	d0/a0-a1,-(sp)			; Save registers
00010398                            
00010398 207C 0008 0040             	movea.l	#buramData,a0			; Write to temporary save data buffer
0001039E 227C 0000 7400             	movea.l	#SaveDataTemp,a1
000103A4 303C 00AF                  	move.w	#BURAM_DATA_LEN/4-1,d0
000103A8                            
000103A8                            .Write:
000103A8 22D8                       	move.l	(a0)+,(a1)+
000103AA 51C8 FFFC                  	dbf	d0,.Write
000103AE                            
000103AE 4CDF 0301                  	movem.l	(sp)+,d0/a0-a1			; Restore registers
000103B2 4E75                       	rts
000103B4                            
000103B4                            ; -------------------------------------------------------------------------------
000103B4                            ; Read from temporary save data buffer
000103B4                            ; -------------------------------------------------------------------------------
000103B4                            
000103B4                            ReadTempSaveData:
000103B4 48E7 80C0                  	movem.l	d0/a0-a1,-(sp)			; Save registers
000103B8                            
000103B8 207C 0000 7400             	movea.l	#SaveDataTemp,a0		; Read from temporary save data buffer
000103BE 227C 0008 0040             	movea.l	#buramData,a1
000103C4 303C 00AF                  	move.w	#BURAM_DATA_LEN/4-1,d0
000103C8                            
000103C8                            .read:
000103C8 22D8                       	move.l	(a0)+,(a1)+
000103CA 51C8 FFFC                  	dbf	d0,.read
000103CE                            
000103CE 4CDF 0301                  	movem.l	(sp)+,d0/a0-a1			; Restore registers
000103D2 4E75                       	rts
000103D4                            
000103D4                            ; -------------------------------------------------------------------------------
000103D4                            ; Backup RAM data
000103D4                            ; -------------------------------------------------------------------------------
000103D4                            
000103D4                            BuRAMScratch:
000103D4                            	dcb.b	$640, 0				; Scratch RAM
00010A14                            
00010A14                            BuRAMStrings:	
00010A14 0000 0000 0000 0000 0000+  	dcb.b	$C, 0				; Display strings
00010A20                            
00010A20                            ; -------------------------------------------------------------------------------
